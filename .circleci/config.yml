# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
  
    machine:
      image: ubuntu-1604:201903-01
    
    branches:
      only:
        - master
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19
    working_directory: ~/Ombtbiz.in
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      
      - run: 
          command: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      
      - run:
          name: "Install PHP"
          command: |
            sudo apt update && sudo apt install -y software-properties-common

            if [[ $OSD_ID == "ubuntu" ]]; then
              sudo add-apt-repository -yu ppa:ondrej/php
            elif [[ $OSD_ID == "debian" ]]; then
              curl -fsSL https://packages.sury.org/php/apt.gpg | sudo apt-key add -
              sudo add-apt-repository "deb https://packages.sury.org/php/ $(lsb_release -cs) main"
            else
              echo "OS not supported."
            fi

            sudo apt-get update
            sudo apt-get install -y php

      - run:
          command: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
     
      - run:
          command: php -r "if (hash_file('SHA384', 'composer-setup.php') === 'c5b9b6d368201a9db6f74e2611495f369991b72d9c8cbd3ffbc63edff210eb73d46ffbfce88669ad33695ef77dc76976') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      
      - run:
          command: php composer-setup.php
      
      - run:
          command: php -r "unlink('composer-setup.php');"
      
      - run:
          command: php composer.phar self-update
      
      - run:
          command: sudo mv composer.phar /usr/local/bin/composer
      
      - run: composer install -n --prefer-dist
            
      - save_cache:
          key: 
            v1-dependencies-{{ checksum "composer.json" }}
          paths: 
            - ./vendor
      
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      
      - run:
          name: Install node@13.6.0 (need right version for `yarn`)
          command: |
            set +e             
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v13.6.0
            nvm alias default v13.6.0

            # Each step uses the same `$BASH_ENV`, so need to modify it
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      
      - save_cache:
          key:
            node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      - run: sudo php artisan migrate

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
      - run: sudo npm run production
